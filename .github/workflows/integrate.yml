name: Integration
on:
  pull_request:
    types: [ 'opened', 'reopened', 'edited', 'ready_for_review', 'synchronize' ]
  push:
    branches: ['main', 'master' ]
    tags: [ '!v[0-9].*' ]
  workflow_call:
  
defaults:
  run:
    shell: bash

jobs:
  skip_check:
    name: Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.collate_checks.outputs.should_skip }}
      run_integration: true
      run_release: ${{ !steps.collate_checks.outputs.should_skip }}
    steps:
    -   name: Check if CI is forced
        id: force_ci_check
        if: |
            github.event_name == 'push' &&
            contains(github.event.head_commit.message, '[force ci]')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event.pull_request &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false')
        env:
            draft: ${{ github.event.pull_request.draft }}
        run: |
            echo "::set-output name=should_skip::$draft"
    -   name: Check if this is a Release
        id: released_check
        if: |
            github.event_name == 'push' &&
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if changes pushed
        id: push_new_check
        if: |
            github.event_name == 'push' &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
            github_token: ${{ secrets.GITHUB_TOKEN }}
            concurrent_skipping: never
    -   name: Collate Checks
        id: collate_checks
        if: |
            (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
            (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
            pr_draft_check: ${{ steps.pr_draft_check.outcome }}
            force_ci_check: ${{ steps.force_ci_check.outcome }}
            released_check: ${{ steps.released_check.outcome }}
            push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
            echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
            if [ "$pr_draft_check" == "skipped" ] && \
                [ "$force_ci_check" == "skipped" ] && \
                [ "$released_check" == "skipped" ] && \
                [ "$push_new_check" == "skipped" ]
            then
                echo "All checks skipped, I don't know what to do."
                exit 1
            else
                echo "::set-output name=should_skip::true"
            fi

  build:
    runs-on: ${{ matrix.os }}
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    strategy:
      matrix:
          include:
          - os: ubuntu-22.04
          - os: macos-12
          - os: windows-2022
      fail-fast: false
    env: 
      workingDir: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout XKCP
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: |
          case "${RUNNER_OS}" in
            Linux)    echo "No requirement for Linux" ;;
            macOS)    echo "No requirement for MacOS" ;;
            Windows)  echo "No requirement for Windows" ;;
            *)        echo "Do not recognise ${RUNNER_OS}." && exit 1 ;;
          esac
        env:
          HOMEBREW_NO_ENV_HINTS: true
      - name: Linux (x86-64)
        if: runner.os == 'Linux'
        run: |
          mkdir $workingDir && cd $workingDir
          cmake .. -DBUILD_SHARED_LIBS=ON
          cmake --build .
      - name: MacOS (ARM64 & x86-64)
        if: runner.os == 'macOS'
        run: |
          mkdir $workingDir && cd $workingDir
          cmake .. -DBUILD_SHARED_LIBS=ON -DXKCP_TARGETS=generic64 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build .
          cmake .. -DBUILD_SHARED_LIBS=ON -DXKCP_TARGETS="SSSE3;SSE42;AVX;AVX2;AVX512" -DCMAKE_OSX_ARCHITECTURES="x86_64"
          cmake --build .
      - name: Windows (x86-64)
        if: runner.os == 'Windows'
        shell: C:\MSys64\msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
        run: |
          pacman -S --noconfirm mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-ninja
          mkdir $workingDir && cd $workingDir
          cmake .. -DBUILD_SHARED_LIBS=ON
          cmake --build .
      - name: Collect & Validate
        run: |
          mkdir artifacts
          for arch in generic64 AVX AVX2 AVX512 SSSE3 SSE42
          do
            echo "Moving ${arch}"
            case "${RUNNER_OS}" in
              Linux)    mv ${workingDir}/${arch}/libXKCP.so artifacts/libXKCP-${arch}.so ;;
              macOS)    mv ${workingDir}/${arch}/libXKCP.dylib artifacts/libXKCP-${arch}.dylib ;;
              Windows)  mv ${workingDir}/${arch}/libXKCP.DLL artifacts/XKCP-${arch}.DLL ;; # Windows incorrectly builds with the lib prefix
              *)        echo "Do not recognise ${RUNNER_OS}." && exit 1 ;;
            esac
          done
          ls -laR artifacts
      - name: Upload Headers
        uses: actions/upload-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: XKCP-Headers
          path: |
            ${{ env.workingDir }}/include/XKCP/**
          if-no-files-found: error
      - name: Upload Uncompressed Binaries
        uses: actions/upload-artifact@v3
        with:
          name: XKCP-${{ runner.os }}
          path: |
            artifacts/**
          if-no-files-found: error

  compress:
    name: Compress
    needs: [ build ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2022 ]
        arch: [ generic64, AVX, AVX2, AVX512, SSSE3, SSE42 ]
      fail-fast: false
    env: 
      workingDir: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: XKCP-${{ runner.os }}
      - name: List Files
        run: |
          ls -laR
      - name: Determine Filename
        id: os_library
        run: |
          case "${RUNNER_OS}" in
            Linux)    echo "::set-output name=filename::libXKCP-${arch}.so" ;;
            macOS)    echo "::set-output name=filename::libXKCP-${arch}.dylib" ;;
            Windows)  echo "::set-output name=filename::XKCP-${arch}.DLL" ;;
            *)        echo "Do not recognise ${RUNNER_OS}." && exit 1 ;;
          esac
        env:
          arch: ${{ matrix.arch }}
      - name: Set Executable Flag (Linux)
        if: runner.os == 'Linux'
        run: |
          chmod +x ${filename}
        env:
          filename: ${{ steps.os_library.outputs.filename }}
      - name: Compress Binaries
        uses: svenstaro/upx-action@v2
        with:
          file: ${{ steps.os_library.outputs.filename }}
          args: --best
          strip: false
      - name: Validate compression
        run: |
          ls -la
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: XKCP-${{ runner.os }}-${{ matrix.arch }}-UPX
          path: |
            ${{ steps.os_library.outputs.filename }}
          if-no-files-found: error
  
  package:
    name: Package libraries
    needs: [ build, compress ]
    runs-on: ubuntu-latest
    env: 
      workingDir: build
      collectDir: collection
    defaults:
      run:
        shell: bash
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
      - name: Collect
        run: |
          mkdir ${collectDir}
          ls -lR
          #
          # Windows compressed files
          platform=Windows
          dir=${collectDir}/${platform}
          mkdir ${dir}
          echo "Created ${dir}"
          for arch in generic64 AVX AVX2 AVX512 SSSE3 SSE42 ; do
            file="XKCP-${platform}-${arch}-UPX/XKCP-${arch}.DLL"
            if [[ -f ${file} ]]; then
              echo "Copying ${file}"
              mv ${file} ${dir}/
            else
              echo "Skipping compression for ${arch}, did not find ${file}"
              mv XKCP-${platform}/XKCP-${arch}.DLL ${dir}/
            fi
          done
          #
          # Uncompressed platforms
          for platform in Linux macOS ; do
            dir=${collectDir}/${platform}
            mkdir ${dir}
            mv XKCP-${platform}/* ${dir}/
          done
          #
          # Set generic64 as default library on all platforms
          mv ${collectDir}/Linux/libXKCP-generic64.so ${collectDir}/Linux/libXKCP.so
          mv ${collectDir}/macOS/libXKCP-generic64.dylib ${collectDir}/macOS/libXKCP.dylib
          mv ${collectDir}/Windows/XKCP-generic64.DLL ${collectDir}/Windows/XKCP.DLL
          #
          # Collect headers
          mkdir ${collectDir}/Headers
          mv XKCP-Headers/* ${collectDir}/Headers/
          ls -lR ${collectDir}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: XKCP
          path: |
            ${{ env.collectDir }}/**
          if-no-files-found: error
