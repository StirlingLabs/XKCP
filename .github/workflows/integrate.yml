name: Integration
on:
  pull_request:
    branches:
    - '**'
    - '!gh-pages'

  push:
    branches:
      - master
      - main

  workflow_call:

jobs:
  skip_check:
    name: Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.collate_checks.outputs.should_skip }}
      run_integration: true
      run_release: ${{ !steps.collate_checks.outputs.should_skip }}
    steps:
    -   name: Check if CI is forced
        id: force_ci_check
        if: |
            github.event_name == 'push' &&
            contains(github.event.head_commit.message, '[force ci]')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event.pull_request &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false')
        env:
            draft: ${{ github.event.pull_request.draft }}
        run: |
            echo "::set-output name=should_skip::$draft"
    -   name: Check if this is a Release
        id: released_check
        if: |
            github.event_name == 'push' &&
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if changes pushed
        id: push_new_check
        if: |
            github.event_name == 'push' &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
    -   name: Collate Checks
        id: collate_checks
        if: |
            (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
            (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
            pr_draft_check: ${{ steps.pr_draft_check.outcome }}
            force_ci_check: ${{ steps.force_ci_check.outcome }}
            released_check: ${{ steps.released_check.outcome }}
            push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
            echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
            if [ "$pr_draft_check" == "skipped" ] && \
                [ "$force_ci_check" == "skipped" ] && \
                [ "$released_check" == "skipped" ] && \
                [ "$push_new_check" == "skipped" ]
            then
                echo "All checks skipped, I don't know what to do."
                exit 1
            else
                echo "::set-output name=should_skip::true"
            fi

  build-win:
    runs-on: windows-latest
    name: Build for Windows
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Add Path Msys64 Directory
      run: |
        echo "c:\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Install msys2 dependencies
      shell: msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
      run: |
        pacman -S --noconfirm ucrt64/mingw-w64-ucrt-x86_64-libxslt ucrt64/mingw-w64-ucrt-x86_64-make ucrt64/mingw-w64-ucrt-x86_64-gcc
        ln -s /ucrt64/bin/mingw32-make.exe /ucrt64/bin/make.exe
        echo GCC: $(which gcc)
        echo MAKE: $(which make)
        echo MSYSTEM: ${MSYSTEM}
    - name: Generic64
      shell: msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
      run: |
        make generic64/libXKCP.so
        make generic64/UnitTests && bin/generic64/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=x86-64 -mtune=native
        ASMFLAGS: -march=x86-64 -mtune=native
    - name: SSSE3
      shell: msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
      run: |
        make SSSE3/libXKCP.so
        make SSSE3/UnitTests && bin/SSSE3/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=core2 -msse2 -mssse3 -mtune=native
        ASMFLAGS: -march=core2 -mtune=native
    - name: AVX2
      shell: msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
      run: |
        make AVX2/libXKCP.so
        make AVX2/UnitTests && bin/AVX2/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=skylake -mtune=native
        ASMFLAGS: -march=skylake -mtune=native
    - name: AVX512
      shell: msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
      run: |
        make AVX512/libXKCP.so
        # make AVX512/UnitTests && bin/AVX512/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=skylake-avx512 -mtune=native
        ASMFLAGS: -march=skylake-avx512 -mtune=native

    - name: Rename artifacts
      run: |
          mkdir bin/artifacts
          mv bin/AVX2/libXKCP.so bin/artifacts/XKCP-AVX2.dll
          mv bin/AVX512/libXKCP.so bin/artifacts/XKCP-AVX512.dll
          mv bin/SSSE3/libXKCP.so bin/artifacts/XKCP-SSSE3.dll
          mv bin/generic64/libXKCP.so bin/artifacts/XKCP.dll
          mv bin/generic64/libXKCP.so.headers bin/artifacts/include
          ls bin/artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: XKCP-win
        path: |
          bin/artifacts/*.dll
          bin/artifacts/libXKCP-win.so.headers

  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install xsltproc -y
    - name: Generic64
      run: |
        make generic64/libXKCP.so
        make generic64/UnitTests && bin/generic64/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=x86-64 -mtune=native
        ASMFLAGS: -march=x86-64 -mtune=native
    - name: SSSE3
      run: |
        make SSSE3/libXKCP.so
        make SSSE3/UnitTests && bin/SSSE3/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=core2 -msse2 -mssse3 -mtune=native
        ASMFLAGS: -march=core2 -mtune=native
    - name: AVX2
      run: |
        make AVX2/libXKCP.so
        make AVX2/UnitTests && bin/AVX2/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=skylake -mtune=native
        ASMFLAGS: -march=skylake -mtune=native
    - name: AVX512
      run: |
        make AVX512/libXKCP.so
        # make AVX512/UnitTests && bin/AVX512/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=skylake-avx512 -mtune=native
        ASMFLAGS: -march=skylake-avx512 -mtune=native
    - name: Rename artifacts
      run: |
          mkdir bin/artifacts
          mv bin/AVX2/libXKCP.so bin/artifacts/libXKCP-AVX2.so
          mv bin/AVX512/libXKCP.so bin/artifacts/libXKCP-AVX512.so
          mv bin/SSSE3/libXKCP.so bin/artifacts/libXKCP-SSSE3.so
          mv bin/generic64/libXKCP.so bin/artifacts/libXKCP.so
          mv bin/generic64/libXKCP.so.headers bin/artifacts/include
          ls -lR bin/artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: XKCP-linux
        path: |
          bin/artifacts/*.so
          bin/artifacts/include

  build-osx:
    name: Build for MacOS
    runs-on: macos-latest
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        brew install libxslt
    - name: ARMv8A (M-series)
      run: |
        make ARMv8A/libXKCP.dylib
        if [[ $(sysctl -n machdep.cpu.brand_string) =~ "Apple" ]]; then
          make ARMv8A/UnitTests && bin/ARMv8A/UnitTests -a
        else
          echo "Intel CPU, can't test."
        fi
      env:
        CFLAGS: -target aarch64-apple-darwin -arch arm64 -O3 -g0 -march=armv8-a
        ASMFLAGS: -march=armv8-a
    - name: Generic x86_64
      run: |
        make generic64/libXKCP.dylib
        make generic64/UnitTests && bin/generic64/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=x86-64 -mtune=native
        ASMFLAGS: -march=x86-64 -mtune=native
    - name: SSSE3
      run: |
        make SSSE3/libXKCP.dylib
        make SSSE3/UnitTests && bin/SSSE3/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=core2 -msse2 -mssse3 -mtune=native
        ASMFLAGS: -march=core2 -mtune=native
    - name: AVX2
      run: |
        make AVX2/libXKCP.dylib
        # make AVX2/UnitTests && bin/AVX2/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=skylake -mtune=native
        ASMFLAGS: -march=skylake -mtune=native
    - name: AVX512
      run: |
        make AVX512/libXKCP.dylib
        # make AVX512/UnitTests && bin/AVX512/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=skylake-avx512 -mtune=native
        ASMFLAGS: -march=skylake-avx512 -mtune=native
    - name: Rename and merge Generic64 and ARMv8A artifacts
      run: |
          mkdir bin/artifacts
          mv bin/AVX2/libXKCP.dylib bin/artifacts/libXKCP-AVX2.dylib
          mv bin/AVX512/libXKCP.dylib bin/artifacts/libXKCP-AVX512.dylib
          mv bin/SSSE3/libXKCP.dylib bin/artifacts/libXKCP-SSSE3.dylib
          lipo bin/generic64/libXKCP.dylib bin/ARMv8A/libXKCP.dylib -create -output bin/artifacts/libXKCP.dylib
          mv bin/generic64/libXKCP.dylib.headers bin/artifacts/include
          ls bin/artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: XKCP-osx
        path: |
          bin/artifacts/*.dylib
          bin/artifacts/libXKCP-osx.dylib.headers
