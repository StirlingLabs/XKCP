name: Integration
on:
  pull_request:
    branches: [ '**', '**/*', '!gh-pages' ]
    types: [ opened, reopened, ready_for_review, synchronize ]
  push:
    branches: [ 'main', 'master', 'feature/cmake' ]
    tags: [ '!v[0-9].*' ]
  workflow_call:

defaults:
  run:
    shell: bash

jobs:
  skip_check:
    name: Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.collate_checks.outputs.should_skip }}
      run_integration: true
      run_release: ${{ !steps.collate_checks.outputs.should_skip }}
    steps:
    -   name: Check if CI is forced
        id: force_ci_check
        if: |
            github.event_name == 'push' &&
            contains(github.event.head_commit.message, '[force ci]')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event.pull_request &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false')
        env:
            draft: ${{ github.event.pull_request.draft }}
        run: |
            echo "::set-output name=should_skip::$draft"
    -   name: Check if this is a Release
        id: released_check
        if: |
            github.event_name == 'push' &&
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if changes pushed
        id: push_new_check
        if: |
            github.event_name == 'push' &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
            github_token: ${{ secrets.GITHUB_TOKEN }}
            concurrent_skipping: never
    -   name: Collate Checks
        id: collate_checks
        if: |
            (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
            (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
            pr_draft_check: ${{ steps.pr_draft_check.outcome }}
            force_ci_check: ${{ steps.force_ci_check.outcome }}
            released_check: ${{ steps.released_check.outcome }}
            push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
            echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
            if [ "$pr_draft_check" == "skipped" ] && \
                [ "$force_ci_check" == "skipped" ] && \
                [ "$released_check" == "skipped" ] && \
                [ "$push_new_check" == "skipped" ]
            then
                echo "All checks skipped, I don't know what to do."
                exit 1
            else
                echo "::set-output name=should_skip::true"
            fi

  build:
    runs-on: ${{ matrix.os }}
    needs: skip_check
    strategy:
      matrix:
          include:
          - os: ubuntu-22.04
          - os: macos-12
          - os: windows-2022
      fail-fast: false
    env: 
      workingDir: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout XKCP
        uses: actions/checkout@v3
      - name: Setup MS Build
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1
      - name: Install Dependencies
        run: |
          case "${RUNNER_OS}" in
              Linux)    echo "No requirement for Linux" ;;
              macOS)    echo "No requirement for MacOS" ;;
              Windows)  echo "No requirement for Windows" ;;
              *)        echo "Do not recognise ${RUNNER_OS}." && exit 1 ;;
          esac
        env:
          HOMEBREW_NO_ENV_HINTS: true
      - name: Configure
        run: |
          mkdir $workingDir
          cmake -B $workingDir -DBUILD_SHARED_LIBS=ON
      - name: Make
        run: |
          make
        working-directory: ${{ env.workingDir }}
      - name: Validate Make
        run: |
          ls -la
        working-directory: ${{ env.workingDir }}
      - name: Upload Uncompressed Binaries
        uses: actions/upload-artifact@v3
        with:
          name: XKCP-${{ runner.os }}-x86-NoUPX
          path: |
            ${{ env.workingDir }}/**
          if-no-files-found: error

  compress:
    name: Compress
    needs: [ build ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-22.04
          filename: libXKCP.so
        - os: windows-2022
          filename: XKCP.DLL
        arch: [ generic64, AVX, AVX2, AVX512, SSSE3, SSE42 ]
      fail-fast: false
    env: 
      workingDir: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
      - name: Compress Binaries
        uses: svenstaro/upx-action@v2
        with:
          file: XKCP-${{ runner.os }}-x86-NoUPX/${{ matrix.arch }}/${{ matrix.filename }}
          args: --best
          strip: false
      - name: Validate compression
        run: |
          ls -la
        working-directory: ${{ env.workingDir }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: XKCP-${{ runner.os }}-x86-${{ matrix.arch }}-UPX
          path: |
            ${{ env.workingDir }}/${{ matrix.arch }}/${{ matrix.filename }}
          if-no-files-found: error
  
  package:
    name: Package libraries
    needs: [ compress ]
    runs-on: ubuntu-latest
    env: 
      workingDir: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
      - name: Collect
        run: |
          mkdir collection
          for platform in Linux macOS Windows
          do
            mkdir collection/${platform}
            dir=collection/${platform}/x86
            mkdir ${dir}
            for arch in generic64 AVX AVX2 AVX512 SSSE3 SSE42
            do
              echo "Copying ${platform}/${arch}"
              mkdir ${dir}/${arch}
              cp XKCP-${platform}-x86-${arch}-UPX/* ${dir}/${arch}/
            done
          done
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: XKCP
          path: |
            collection/**
          if-no-files-found: error


  build-win:
    runs-on: windows-latest
    name: Windows
    needs: skip_check
    if: false && needs.skip_check.outputs.should_skip != 'true'
    defaults:
      run:
        shell: msys2_shell.cmd -defterm -no-start -here -ucrt64 {0}
    steps:
    - uses: actions/checkout@v3
    - name: Setup MS Build
      uses: microsoft/setup-msbuild@v1.1
    - name: Add Msys64 to path
      shell: pwsh
      run: |
        echo "c:\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Install msys2 dependencies
      run: |
        pacman -S --noconfirm ucrt64/mingw-w64-ucrt-x86_64-libxslt ucrt64/mingw-w64-ucrt-x86_64-make ucrt64/mingw-w64-ucrt-x86_64-gcc
        ln -s /ucrt64/bin/mingw32-make.exe /ucrt64/bin/make.exe
        echo GCC: $(which gcc)
        echo MAKE: $(which make)
        echo MSYSTEM: ${MSYSTEM}
    - name: Get CPU features
      id: cpu
      run: |
        echo "::set-output name=features::$(echo | gcc -march=native -dM -E - | tr -d '#define' | tr '\r\n' ' ')"
    - name: Generic64
      run: |
        make generic64/libXKCP.so
        make generic64/UnitTests && bin/generic64/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=x86-64 -mtune=native
        ASMFLAGS: -march=x86-64 -mtune=native
    - name: SSE3
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: SSSE3
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -march=core2 -msse2 -mssse3 -mtune=native
        ASMFLAGS: -march=core2 -mtune=native
    - name: AVX2
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: AVX2
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -march=skylake -mtune=native
        ASMFLAGS: -march=skylake -mtune=native
    - name: AVX512
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: AVX512
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -march=skylake-avx512 -mtune=native
        ASMFLAGS: -march=skylake-avx512 -mtune=native

    - name: Rename artifacts
      run: |
          mkdir bin/artifacts
          mv bin/AVX2/libXKCP.so bin/artifacts/XKCP-AVX2.dll
          mv bin/AVX512/libXKCP.so bin/artifacts/XKCP-AVX512.dll
          mv bin/SSSE3/libXKCP.so bin/artifacts/XKCP-SSSE3.dll
          mv bin/generic64/libXKCP.so bin/artifacts/XKCP.dll
          mv bin/generic64/libXKCP.so.headers bin/artifacts/include
          ls bin/artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: XKCP-win
        path: |
          bin/artifacts/*.dll
          bin/artifacts/libXKCP-win.so.headers

  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: skip_check
    if: false && needs.skip_check.outputs.should_skip != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install xsltproc -y
    - name: Get CPU features
      id: cpu
      run: |
        echo "::set-output name=features::$(echo | gcc -march=native -dM -E - | tr -d '#define' | tr '\n' ' ')"
    - name: Generic64
      run: |
        make generic64/libXKCP.so
        make generic64/UnitTests && bin/generic64/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -march=x86-64 -mtune=native
        ASMFLAGS: -march=x86-64 -mtune=native
    - name: SSSE3
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: SSSE3
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -march=core2 -msse2 -mssse3 -mtune=native
        ASMFLAGS: -march=core2 -mtune=native
    - name: AVX2
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: AVX2
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -march=skylake -mtune=native
        ASMFLAGS: -march=skylake -mtune=native
    - name: AVX512
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: AVX512
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -march=skylake-avx512 -mtune=native
        ASMFLAGS: -march=skylake-avx512 -mtune=native
    - name: Rename artifacts
      run: |
          mkdir bin/artifacts
          mv bin/AVX2/libXKCP.so bin/artifacts/libXKCP-AVX2.so
          mv bin/AVX512/libXKCP.so bin/artifacts/libXKCP-AVX512.so
          mv bin/SSSE3/libXKCP.so bin/artifacts/libXKCP-SSSE3.so
          mv bin/generic64/libXKCP.so bin/artifacts/libXKCP.so
          mv bin/generic64/libXKCP.so.headers bin/artifacts/include
          ls -lR bin/artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: XKCP-linux
        path: |
          bin/artifacts/*.so
          bin/artifacts/include

  build-osx:
    name: MacOS
    runs-on: macos-latest
    needs: skip_check
    if: false && needs.skip_check.outputs.should_skip != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        brew install libxslt
    - name: Get CPU features
      id: cpu
      run: |
        /usr/sbin/sysctl -n machdep.cpu.features machdep.cpu.leaf7_features
        echo "::set-output name=features::$(echo | gcc -march=native -dM -E - | tr -d '#define' | tr '\n' ' ')"
    - name: ARMv8A (M-series)
      run: |
        make ARMv8A/libXKCP.dylib
        if [[ $(sysctl -n machdep.cpu.brand_string) =~ "Apple" ]]; then
          make ARMv8A/UnitTests && bin/ARMv8A/UnitTests -a
        else
          echo "Intel CPU, can't test."
        fi
      env:
        CFLAGS: -target aarch64-apple-darwin -arch arm64 -O3 -g0 -march=armv8-a
        ASMFLAGS: -march=armv8-a
    - name: Generic x86_64
      run: |
        make generic64/libXKCP.dylib
        make generic64/UnitTests && bin/generic64/UnitTests -a
      env:
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=x86-64 -mtune=native
        ASMFLAGS: -march=x86-64 -mtune=native
    - name: SSE3
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: SSSE3
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=core2 -msse2 -mssse3 -mtune=native
        ASMFLAGS: -march=core2 -mtune=native
    - name: AVX2
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: AVX2
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=skylake -mtune=native
        ASMFLAGS: -march=skylake -mtune=native
    - name: AVX512
      run: |
        ./buildForFeature.sh $feature
      env:
        feature: AVX512
        thisCPU: ${{ steps.cpu.outputs.features}}
        CFLAGS: -O3 -g0 -target x86_64-apple-darwin -arch x86_64 -march=skylake-avx512 -mtune=native
        ASMFLAGS: -march=skylake-avx512 -mtune=native
    - name: Rename and merge Generic64 and ARMv8A artifacts
      run: |
          mkdir bin/artifacts
          mv bin/AVX2/libXKCP.dylib bin/artifacts/libXKCP-AVX2.dylib
          mv bin/AVX512/libXKCP.dylib bin/artifacts/libXKCP-AVX512.dylib
          mv bin/SSSE3/libXKCP.dylib bin/artifacts/libXKCP-SSSE3.dylib
          lipo bin/generic64/libXKCP.dylib bin/ARMv8A/libXKCP.dylib -create -output bin/artifacts/libXKCP.dylib
          mv bin/generic64/libXKCP.dylib.headers bin/artifacts/include
          ls bin/artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: XKCP-osx
        path: |
          bin/artifacts/*.dylib
          bin/artifacts/libXKCP-osx.dylib.headers
